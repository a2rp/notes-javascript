import{j as e}from"./index-4OJNB7vi.js";import{S as s}from"./styled-CSyC-YA8.js";import{B as n}from"./Breadcrumbs-BWCvk1iJ.js";import{L as l}from"./index-DfUzXn8d.js";function o(){return e.jsxs(s.Wrapper,{children:[e.jsx(n,{sectionLabel:"Language Fundamentals",sectionPath:"/language-fundamentals",topics:l}),e.jsx(s.Heading,{children:"Truthy & falsy"}),e.jsxs(s.Prose,{children:[e.jsxs("p",{children:[e.jsx("b",{children:"Definition."})," In boolean contexts, values coerce to ",e.jsx("b",{children:"true"})," (truthy) or"," ",e.jsx("b",{children:"false"})," (falsy). Know the exact falsy set; everything else is truthy."]}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"The falsy list (complete)"}),e.jsxs("ul",{children:[e.jsx("li",{children:e.jsx("code",{children:"false"})}),e.jsxs("li",{children:[e.jsx("code",{children:"0"}),", ",e.jsx("code",{children:"-0"}),", ",e.jsx("code",{children:"0n"})," (BigInt zero)"]}),e.jsxs("li",{children:[e.jsx("code",{children:'""'})," (empty string)"]}),e.jsxs("li",{children:[e.jsx("code",{children:"null"}),", ",e.jsx("code",{children:"undefined"})]}),e.jsx("li",{children:e.jsx("code",{children:"NaN"})})]}),e.jsxs("p",{children:["Everything else is ",e.jsx("b",{children:"truthy"}),": non-empty strings, objects/arrays/functions, non-zero numbers, ",e.jsx("code",{children:"Infinity"}),", dates, regexes, etc."]}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Tiny examples"}),e.jsx(s.Pre,{children:`Boolean("")        // false
Boolean("0")       // true   (non-empty string)
Boolean([])        // true
Boolean({})        // true
Boolean(0)         // false
Boolean(0n)        // false
Boolean(NaN)       // false
Boolean(new Boolean(false)) // true (object is truthy)`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Short-circuit gotchas"}),e.jsx(s.Pre,{children:`// || picks the right-hand side when left is *falsy* (0, "", etc.)
const size = user.size || 16;    // if size = 0 (valid), this becomes 16 ❌

// ?? only falls back on null/undefined — keeps 0, "" and false
const safeSize = user.size ?? 16; // if size = 0, stays 0 ✅

const label = user.name && "Has name"; // returns "Has name" or a falsy value (not strictly boolean)
`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Patterns"}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Coerce to boolean:"})," ",e.jsx("code",{children:"Boolean(x)"})," (preferred) or ",e.jsx("code",{children:"!!x"}),"."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Fallbacks:"})," use ",e.jsx("code",{children:"??"})," when ",e.jsx("code",{children:"0"}),"/",e.jsx("code",{children:'""'}),"/",e.jsx("code",{children:"false"})," are legitimate values."]}),e.jsxs("li",{children:[e.jsx("b",{children:"Guarded access:"})," combine with optional chaining — ",e.jsx("code",{children:"user?.age ?? 0"}),"."]})]}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Edge notes"}),e.jsxs("ul",{children:[e.jsxs("li",{children:[`Objects are always truthy—even "empty" ones. Don't check emptiness with `,e.jsx("code",{children:"if (obj)"}),"; test keys/length."]}),e.jsxs("li",{children:["Legacy quirk: ",e.jsx("code",{children:"document.all"})," is treated as falsy and special in loose checks; avoid relying on it."]})]})]})]})}export{o as default};
