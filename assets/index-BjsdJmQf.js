const __vite__mapDeps=(i,m=__vite__mapDeps,d=(m.f||(m.f=["assets/ProgramStructureAsi-V2E7VSb3.js","assets/index-COrpvOC4.js","assets/index-CrsJ3uMt.css","assets/styled-djaoR-0a.js","assets/Breadcrumbs-DQDVi04u.js","assets/IdentifiersReservedWords-BHkgcjvf.js","assets/StrictMode-DY0wMMLL.js","assets/ValuesTypes-D2KZ9OwX.js","assets/TypeChecks-CPVv0Wv5.js","assets/TruthyFalsy-b6MZviyU.js","assets/Equality-D3ei3w6e.js","assets/TypeCoercion-CCX20g86.js","assets/VarLetConst-DQwFnsSx.js","assets/Scope-BST5QYrc.js","assets/Tdz-ouftzFk8.js","assets/Hoisting-BG6LlmVi.js","assets/Closures-Dng5FyXY.js","assets/OperatorBasicsPrecedence-CPDCcFrr.js","assets/ArithmeticComparisonLogical-BMIx4Jdr.js","assets/ModernOperators-CKOaZdiX.js","assets/BitwiseShift-DXjKtolh.js","assets/ControlFlow-Bkubbo3x.js","assets/Loops-DXNomdvx.js","assets/ForOfForIn-e9_4UQUf.js","assets/LabelsBreakContinue-BkIyTc9d.js"])))=>i.map(i=>d[i]);
import{u as d,r as l,j as t,C as _,_ as e,N as u,d as i}from"./index-COrpvOC4.js";import{B as c}from"./Breadcrumbs-DQDVi04u.js";const p=[{slug:"program-structure-asi",title:"Program structure & ASI"},{slug:"identifiers-reserved-words",title:"Identifiers & reserved words"},{slug:"strict-mode",title:"Strict mode"},{slug:"values-types",title:"Values & types"},{slug:"type-checks",title:"Type checks"},{slug:"truthy-falsy",title:"Truthy & falsy"},{slug:"equality",title:"Equality"},{slug:"type-coercion",title:"Type coercion"},{slug:"var-let-const",title:"var vs let vs const"},{slug:"scope",title:"Scope"},{slug:"tdz",title:"TDZ"},{slug:"hoisting",title:"Hoisting"},{slug:"closures",title:"Closures"},{slug:"operator-basics-precedence",title:"Operator basics & precedence"},{slug:"arithmetic-comparison-logical",title:"Arithmetic, comparison, logical"},{slug:"modern-operators",title:"Modern operators"},{slug:"bitwise-shift",title:"Bitwise & shift"},{slug:"control-flow",title:"Control flow"},{slug:"loops",title:"Loops"},{slug:"forof-forin",title:"for…of vs for…in"},{slug:"labels-break-continue",title:"Labels, break, continue"}],n=[{slug:"program-structure-asi",title:"Program structure & ASI",loader:()=>e(()=>import("./ProgramStructureAsi-V2E7VSb3.js"),__vite__mapDeps([0,1,2,3,4]))},{slug:"identifiers-reserved-words",title:"Identifiers & reserved words",loader:()=>e(()=>import("./IdentifiersReservedWords-BHkgcjvf.js"),__vite__mapDeps([5,1,2,3,4]))},{slug:"strict-mode",title:"Strict mode",loader:()=>e(()=>import("./StrictMode-DY0wMMLL.js"),__vite__mapDeps([6,1,2,3,4]))},{slug:"values-types",title:"Values & types",loader:()=>e(()=>import("./ValuesTypes-D2KZ9OwX.js"),__vite__mapDeps([7,1,2,3,4]))},{slug:"type-checks",title:"Type checks",loader:()=>e(()=>import("./TypeChecks-CPVv0Wv5.js"),__vite__mapDeps([8,1,2,3,4]))},{slug:"truthy-falsy",title:"Truthy & falsy",loader:()=>e(()=>import("./TruthyFalsy-b6MZviyU.js"),__vite__mapDeps([9,1,2,3,4]))},{slug:"equality",title:"Equality",loader:()=>e(()=>import("./Equality-D3ei3w6e.js"),__vite__mapDeps([10,1,2,3,4]))},{slug:"type-coercion",title:"Type coercion",loader:()=>e(()=>import("./TypeCoercion-CCX20g86.js"),__vite__mapDeps([11,1,2,3,4]))},{slug:"var-let-const",title:"var vs let vs const",loader:()=>e(()=>import("./VarLetConst-DQwFnsSx.js"),__vite__mapDeps([12,1,2,3,4]))},{slug:"scope",title:"Scope",loader:()=>e(()=>import("./Scope-BST5QYrc.js"),__vite__mapDeps([13,1,2,3,4]))},{slug:"tdz",title:"TDZ",loader:()=>e(()=>import("./Tdz-ouftzFk8.js"),__vite__mapDeps([14,1,2,3,4]))},{slug:"hoisting",title:"Hoisting",loader:()=>e(()=>import("./Hoisting-BG6LlmVi.js"),__vite__mapDeps([15,1,2,3,4]))},{slug:"closures",title:"Closures",loader:()=>e(()=>import("./Closures-Dng5FyXY.js"),__vite__mapDeps([16,1,2,3,4]))},{slug:"operator-basics-precedence",title:"Operator basics & precedence",loader:()=>e(()=>import("./OperatorBasicsPrecedence-CPDCcFrr.js"),__vite__mapDeps([17,1,2,3,4]))},{slug:"arithmetic-comparison-logical",title:"Arithmetic, comparison, logical",loader:()=>e(()=>import("./ArithmeticComparisonLogical-BMIx4Jdr.js"),__vite__mapDeps([18,1,2,3,4]))},{slug:"modern-operators",title:"Modern operators",loader:()=>e(()=>import("./ModernOperators-CKOaZdiX.js"),__vite__mapDeps([19,1,2,3,4]))},{slug:"bitwise-shift",title:"Bitwise & shift",loader:()=>e(()=>import("./BitwiseShift-DXjKtolh.js"),__vite__mapDeps([20,1,2,3,4]))},{slug:"control-flow",title:"Control flow",loader:()=>e(()=>import("./ControlFlow-Bkubbo3x.js"),__vite__mapDeps([21,1,2,3,4]))},{slug:"loops",title:"Loops",loader:()=>e(()=>import("./Loops-DXNomdvx.js"),__vite__mapDeps([22,1,2,3,4]))},{slug:"forof-forin",title:"for…of vs for…in",loader:()=>e(()=>import("./ForOfForIn-e9_4UQUf.js"),__vite__mapDeps([23,1,2,3,4]))},{slug:"labels-break-continue",title:"Labels, break, continue",loader:()=>e(()=>import("./LabelsBreakContinue-BkIyTc9d.js"),__vite__mapDeps([24,1,2,3,4]))}],g=Object.fromEntries(n.map(r=>[r.slug,r.loader]));function m(){return t.jsxs(o.Wrapper,{children:[t.jsx(c,{sectionLabel:"Language Fundamentals",sectionPath:"/language-fundamentals",topics:p}),t.jsx(o.Heading,{children:"Language Fundamentals"}),t.jsx(o.ListWrapper,{children:t.jsx(o.List,{children:n.map(({slug:r,title:s})=>t.jsx("li",{children:t.jsx(u,{to:`/language-fundamentals/${r}`,children:s})},r))})})]})}function E(){return t.jsxs(o.Wrapper,{children:[t.jsx("h3",{children:"Topic not found"}),t.jsxs("p",{children:["Go back to"," ",t.jsx(u,{to:"/language-fundamentals",children:"Language Fundamentals"}),"."]})]})}const v=()=>{const{topic_name:r}=d(),s=l.useMemo(()=>{if(!r)return m;const a=g[r];return a?l.lazy(a):E},[r]);return t.jsx(l.Suspense,{fallback:t.jsx("div",{style:{padding:24},children:t.jsx(_,{})}),children:t.jsx(s,{})})},o={Wrapper:i.div`
    padding: 50px;
    @media (width < 900px) { padding: 15px; }
  `,Heading:i.h1`
    margin-bottom: 30px;
  `,ListWrapper:i.div``,List:i.ul`
    display: flex;
    flex-wrap: wrap;
    gap: 15px;

    li {
      width: 250px;

      a {
        display: flex;
        color: #aaa;
        text-decoration: none;

        &:hover { color: orangered; }
      }
    }
  `},h=Object.freeze(Object.defineProperty({__proto__:null,default:v},Symbol.toStringTag,{value:"Module"}));export{p as L,h as i};
