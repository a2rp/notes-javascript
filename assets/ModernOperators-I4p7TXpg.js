import{j as e}from"./index-D5VEPJXy.js";import{S as s}from"./styled-C4KleH81.js";import{B as n}from"./Breadcrumbs-_bfjIlB_.js";import{L as i}from"./index-BHpXNq8N.js";function o(){return e.jsxs(s.Wrapper,{children:[e.jsx(n,{sectionLabel:"Language Fundamentals",sectionPath:"/language-fundamentals",topics:i}),e.jsx(s.Heading,{children:"Modern operators"}),e.jsxs(s.Prose,{children:[e.jsxs("p",{children:[e.jsx("b",{children:"Focus."})," ",e.jsx("code",{children:"?."})," (optional chaining), ",e.jsx("code",{children:"??"})," (nullish coalescing), and logical assignment ",e.jsx("code",{children:"||="}),", ",e.jsx("code",{children:"&&="}),", ",e.jsx("code",{children:"??="}),". These bring safe access, sane fallbacks, and concise updates."]}),e.jsxs("h2",{style:{margin:"28px 0 12px"},children:["Optional chaining ",e.jsx("code",{children:"?."})]}),e.jsxs("ul",{children:[e.jsxs("li",{children:["Short-circuits when the left side is ",e.jsx("b",{children:"null or undefined"})," only."]}),e.jsxs("li",{children:["Forms: property ",e.jsx("code",{children:"obj?.prop"}),", index ",e.jsx("code",{children:"obj?.[key]"}),", call ",e.jsx("code",{children:"obj?.fn?.(args)"}),"."]}),e.jsxs("li",{children:["Does ",e.jsx("b",{children:"not"})," catch thrown errors (e.g., getters/funcs can still throw)."]}),e.jsxs("li",{children:["Cannot be on the ",e.jsx("i",{children:"assignment target"})," (left side): ",e.jsx("code",{children:"obj?.x = 1"})," ❌"]})]}),e.jsx(s.Pre,{children:`const user = maybeGetUser();           // user may be null/undefined
const city = user?.address?.city ?? "N/A";
user?.notify?.("hi");                 // calls if both exist; otherwise returns undefined

// Deletes are allowed:
delete user?.temp;                    // no-op if user is nullish`}),e.jsxs("h2",{style:{margin:"28px 0 12px"},children:["Nullish coalescing ",e.jsx("code",{children:"??"})]}),e.jsxs("ul",{children:[e.jsxs("li",{children:["Fallback only when the left is ",e.jsx("b",{children:"null/undefined"})," (keeps ",e.jsx("code",{children:"0"}),", ",e.jsx("code",{children:'""'}),", ",e.jsx("code",{children:"false"}),")."]}),e.jsxs("li",{children:["Use instead of ",e.jsx("code",{children:"||"})," when ",e.jsx("code",{children:"0"}),"/",e.jsx("code",{children:'""'}),"/",e.jsx("code",{children:"false"})," are valid values."]})]}),e.jsx(s.Pre,{children:`0 || 16        // 16  (oops: 0 is falsy)
0 ?? 16        // 0   ✅

const label = user.name ?? "(anonymous)";`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Logical assignment"}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("code",{children:"a ||= b"})," → ",e.jsx("code",{children:"a || (a = b)"})," (assign when ",e.jsx("i",{children:"a"})," is falsy)."]}),e.jsxs("li",{children:[e.jsx("code",{children:"a &&= b"})," → ",e.jsx("code",{children:"a && (a = b)"})," (assign when ",e.jsx("i",{children:"a"})," is truthy)."]}),e.jsxs("li",{children:[e.jsx("code",{children:"a ??= b"})," → ",e.jsx("code",{children:"a ?? (a = b)"})," (assign when ",e.jsx("i",{children:"a"})," is nullish)."]}),e.jsx("li",{children:"Left side is evaluated once (good for getters / computed keys)."})]}),e.jsx(s.Pre,{children:`const opts = {};
opts.theme ||= "dark";          // sets when missing/falsy
opts.timeout ??= 0;             // sets only if null/undefined (keeps 0)
opts.enabled &&= false;         // flip off only if currently truthy

// With computed keys:
const key = "cache";
obj[key] ??= new Map();         // creates once`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Mixing rules & patterns"}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("b",{children:"Grammar:"})," you can't mix ",e.jsx("code",{children:"??"})," directly with ",e.jsx("code",{children:"||"}),"/",e.jsx("code",{children:"&&"})," without parentheses."]}),e.jsxs("li",{children:["Common combo: ",e.jsx("code",{children:'user?.prefs?.theme ?? "dark"'}),"."]}),e.jsxs("li",{children:["Guarded calls: ",e.jsx("code",{children:"maybeCb?.(value)"})," — safe optional function call."]})]}),e.jsx(s.Pre,{children:`// Parens required:
(a ?? b) || c
a ?? (b || c)

// Patterns
const port = Number(env.PORT) || 3000;        // treat 0 as invalid here
const safePort = Number(env.PORT ?? 3000);    // keep numbers; default only on null/undefined

// Optional call keeps 'this' when used as method:
obj.method?.();   // if method exists, 'this' is obj`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Must-know (checklist)"}),e.jsxs("ul",{children:[e.jsxs("li",{children:["Use ",e.jsx("code",{children:"??"})," for defaulting; prefer it over ",e.jsx("code",{children:"||"})," if ",e.jsx("code",{children:"0"}),"/",e.jsx("code",{children:'""'}),"/",e.jsx("code",{children:"false"})," are valid."]}),e.jsxs("li",{children:["Use ",e.jsx("code",{children:"?."})," for deep optional access/calls; remember it won't swallow thrown errors."]}),e.jsxs("li",{children:["Prefer logical assignment (",e.jsx("code",{children:"||="}),"/",e.jsx("code",{children:"&&="}),"/",e.jsx("code",{children:"??="}),") over verbose ",e.jsx("code",{children:"if"}),"-checks."]}),e.jsxs("li",{children:["Add parentheses when combining ",e.jsx("code",{children:"??"})," with ",e.jsx("code",{children:"||"}),"/",e.jsx("code",{children:"&&"}),"."]})]})]})]})}export{o as default};
