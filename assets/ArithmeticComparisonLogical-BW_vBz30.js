import{j as e}from"./index-Cud8-B-g.js";import{S as i}from"./styled-ou-l2Jgl.js";import{B as s}from"./Breadcrumbs-BUXMDEQY.js";import{L as r}from"./index-B6WK1LZv.js";function o(){return e.jsxs(i.Wrapper,{children:[e.jsx(s,{sectionLabel:"Language Fundamentals",sectionPath:"/language-fundamentals",topics:r}),e.jsx(i.Heading,{children:"Arithmetic, comparison, logical"}),e.jsxs(i.Prose,{children:[e.jsxs("p",{children:[e.jsx("b",{children:"Definition."})," Daily operators: arithmetic (",e.jsx("code",{children:"+ - * / % **"}),"), comparison (",e.jsx("code",{children:"< > <= >="}),"), and logical (",e.jsx("code",{children:"&& || !"}),"). Know their coercion + short-circuit rules."]}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Arithmetic (number basics)"}),e.jsxs("ul",{children:[e.jsxs("li",{children:["Most ops use ",e.jsx("b",{children:"ToNumber"}),". ",e.jsx("code",{children:"+"})," is special: if either side becomes a string (after ToPrimitive), it concatenates."]}),e.jsxs("li",{children:[e.jsx("code",{children:"**"})," is right-associative; unary minus cannot be on the left operand (use parentheses)."]}),e.jsxs("li",{children:[e.jsx("code",{children:"%"})," is remainder (same sign as dividend), not mathematical modulo."]}),e.jsxs("li",{children:[e.jsx("b",{children:"BigInt"})," can’t mix with ",e.jsx("b",{children:"Number"})," in arithmetic (TypeError). Cast intentionally."]}),e.jsxs("li",{children:["Dividing by 0 yields ",e.jsx("code",{children:"Infinity"}),"/",e.jsx("code",{children:"-Infinity"}),"; ",e.jsx("code",{children:"0/0"})," ⇒"," ",e.jsx("code",{children:"NaN"}),"."]})]}),e.jsx(i.Pre,{children:`1 + 2 * 3        // 7
1 + "2"          // "12" (string +)
"3" * "2"        // 6   (numeric op)
2 ** 3 ** 2      // 512  (2 ** (3 ** 2))
-(2 ** 2)        // -4
5 % 2            // 1
-5 % 2           // -1  (remainder keeps sign)
1 / 0            // Infinity
Number(1n) + 1   // 2   (cast BigInt explicitly)`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Inc/Dec"}),e.jsx("ul",{children:e.jsx("li",{children:"Prefix returns the updated value; postfix returns the old value (then updates)."})}),e.jsx(i.Pre,{children:`let x = 1;
++x        // 2, x = 2
x++        // returns 2, x becomes 3`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Comparison"}),e.jsxs("ul",{children:[e.jsx("li",{children:"Uses ToPrimitive; if both primitives are strings → lexicographic compare, else numeric."}),e.jsxs("li",{children:["Arrays become strings (e.g., ",e.jsx("code",{children:"[2]"})," → ",e.jsx("code",{children:'"2"'}),")."]}),e.jsxs("li",{children:["Any compare with ",e.jsx("code",{children:"NaN"})," is ",e.jsx("b",{children:"false"})," (except ",e.jsx("code",{children:"!="})," which is"," ",e.jsx("b",{children:"true"}),")."]}),e.jsx("li",{children:"Number ↔ BigInt comparisons are allowed; arithmetic mixing is not."})]}),e.jsx(i.Pre,{children:`"20" < "3"    // true (string compare: "2" < "3")
20 < "3"       // false (numeric compare: 20 < 3)
[2] < [10]     // false ("2" < "10" → false)
NaN < 1        // false
NaN >= 1       // false
1n < 2         // true
1n == 1        // true (loose); 1n === 1 // false`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Logical (short-circuit)"}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("code",{children:"&&"})," returns the ",e.jsx("i",{children:"first falsy"})," or the last value;"," ",e.jsx("code",{children:"||"})," returns the ",e.jsx("i",{children:"first truthy"})," or the last value."]}),e.jsxs("li",{children:["They return the operand (not strict booleans). Use ",e.jsx("code",{children:"Boolean(x)"})," or"," ",e.jsx("code",{children:"!!x"})," when you need a bool."]}),e.jsxs("li",{children:["For null/undefined-only fallbacks use ",e.jsx("code",{children:"??"})," (lives in “Modern operators” topic)."]})]}),e.jsx(i.Pre,{children:`"a" && 5        // 5
""  && 5        // ""  (empty string is falsy)
0   || 10       // 10
"hi" || 10      // "hi"
const ok = !!user && user.isActive === true;`}),e.jsx("h2",{style:{margin:"28px 0 12px"},children:"Must-know (checklist)"}),e.jsxs("ul",{children:[e.jsxs("li",{children:[e.jsx("code",{children:"+"}),": any string → concatenation; otherwise numeric add."]}),e.jsxs("li",{children:["Use parentheses around exponent/unary combos; ",e.jsx("code",{children:"**"})," is right-assoc."]}),e.jsx("li",{children:"Comparisons with strings are lexicographic—coerce to numbers if that’s what you mean."}),e.jsx("li",{children:"Don’t mix BigInt with Number in math; comparisons are fine."}),e.jsxs("li",{children:[e.jsx("code",{children:"&&"}),"/",e.jsx("code",{children:"||"})," return operands; use ",e.jsx("code",{children:"??"})," for nullish-only fallbacks."]})]})]})]})}export{o as default};
